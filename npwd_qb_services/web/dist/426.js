"use strict";(self.webpackChunknpwd_app=self.webpackChunknpwd_app||[]).push([[426],{9426:(n,e,o)=>{o.r(e);var t=o(2950),r=o.n(t),i=o(2181),a=o.n(i),p=(o(5475),o(6235),o(3839)),d=o.n(p);d()("div")({width:"100%",justifyContent:"flex-start",display:"flex",alignItems:"center",gap:20,marginBottom:20}),o(4810),o(5974),o(6867),o(2658),o(4669),o(1508),o(2440),o(8277),o(8898),o(5266),o(8584),o(1145);var l,u;d().div(c||(l=["\n  flex: 1;\n  padding: 1.5rem;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  overflow: auto;\n  max-height: 100%;\n  background-color: #fafafa;\n  ","\n"],u=["\n  flex: 1;\n  padding: 1.5rem;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  overflow: auto;\n  max-height: 100%;\n  background-color: #fafafa;\n  ","\n"],Object.defineProperty?Object.defineProperty(l,"raw",{value:u}):l.raw=u,c=l),(function(n){return n.isDarkMode&&"\n    background-color: #212121;\n  "}));var c,x=o(3486),s=o(6115);x.Z[500],s.Z.white;x.Z[700],x.Z[300],o.p,o(5137),o(5142);var f,b,g,h=o(333),v=function(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n};d().div(f||(f=v(["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"],["\n  position: relative;\n  width: 500px;\n  height: 1000px;\n"]))),d().div(b||(b=v(["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"],["\n  background: url(",");\n  position: absolute;\n  z-index: 100;\n  width: 500px;\n  height: 1000px;\n  pointer-events: none;\n"])),(function(n){return n.src})),d().div(g||(g=v(["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n"],["\n  z-index: 2;\n  position: absolute;\n  bottom: 100px;\n  left: 50px;\n  right: 50px;\n  top: 100px;\n  display: flex;\n  flex-direction: column;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n  border-radius: 20px;\n"]))),(0,h.Z)({palette:{mode:"light"}}),a().render(r().createElement((function(){return null}),null),document.getElementById("root"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,