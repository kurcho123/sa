"use strict";(self.webpackChunknpwd_app=self.webpackChunknpwd_app||[]).push([[250],{8333:(e,n,t)=>{var r=t(4836);n.Z=void 0;var o=r(t(4938)),a=t(5893),c=(0,o.default)((0,a.jsx)("path",{d:"M20 6h-4V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-6 0h-4V4h4v2z"}),"Work");n.Z=c},4121:(e,n,t)=>{t.d(n,{T:()=>c});var r=t(2950),o=t.n(r),a=t(8333),c=function(){return o().createElement(a.Z,{fontSize:"large"})}},9250:(e,n,t)=>{t.r(n),t.d(n,{externalAppConfig:()=>c,default:()=>i});var r=t(4023),o=t(4121),a=t(4274),c=function(){return{id:"services",nameLocale:"Services",color:"#fff",backgroundColor:"#FE3B73",path:"/services",icon:o.T,app:r.Z,theme:a.rS}};const i=c},4023:(e,n,t)=>{t.d(n,{Z:()=>x});var r,o,a=t(2950),c=t.n(a),i=t(5475),l=t(6235),u=t(3839),s=t.n(u),f=t(8440),p=t(4810),d=t(5974),h=t(6867),m=t(2658),b=t(4669),v=t(7405),y=t(7905),E=function(){return E=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var o in n=arguments[t])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},E.apply(this,arguments)},Z=s().div(w||(r=["\n  flex: 1;\n  padding: 1.5rem;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  overflow: auto;\n  max-height: 100%;\n  background-color: #fafafa;\n  ","\n"],o=["\n  flex: 1;\n  padding: 1.5rem;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n  overflow: auto;\n  max-height: 100%;\n  background-color: #fafafa;\n  ","\n"],Object.defineProperty?Object.defineProperty(r,"raw",{value:o}):r.raw=o,w=r),(function(e){return e.isDarkMode&&"\n    background-color: #212121;\n  "})),g=function(e){var n=(0,l.useHistory)(),t=(0,a.useState)([]),r=t[0],o=t[1],i=(0,a.useState)(null),u=i[0],s=i[1],E="dark"===e.theme.palette.mode;return(0,a.useEffect)((function(){(0,v.Z)("npwd:qb-services:getPlayers").then((function(e){o(e.data)}))}),[]),(0,a.useEffect)((function(){if(r){var e=null==r?void 0:r.reduce((function(e,n){return e[n.job]||(e[n.job]=[]),e[n.job].push(n),e}),{});s(e)}}),[r]),c().createElement(p.Z,{injectFirst:!0},c().createElement(d.Z,{theme:e.theme},c().createElement(Z,{isDarkMode:E},c().createElement(f.h,null,c().createElement(h.Z,{color:"primary",onClick:function(){return n.goBack()}},c().createElement(b.Z,null)),c().createElement(m.Z,{fontSize:24,color:"primary",fontWeight:"bold"},"Services")),u&&c().createElement(y.W,{isDarkMode:E,players:u}))))};const x=function(e){return c().createElement(i.NuiProvider,null,c().createElement(g,E({},e)))};var w},4274:(e,n,t)=>{t.d(n,{rS:()=>i});var r=t(3486),o=t(6115),a=r.Z[500],c=o.Z.white,i={palette:{primary:{main:a,dark:r.Z[700],light:r.Z[300],contrastText:c},secondary:{main:"#d32f2f",light:"#eb4242",dark:"#941212",contrastText:c},success:{main:"#2196f3",contrastText:c}}}},7905:(e,n,t)=>{t.d(n,{W:()=>h});var r=t(1508),o=t(2440),a=t(8277),c=t(8898),i=t(5266),l=t(6867),u=t(8584),s=t(2950),f=t.n(s),p=t(1145),d=t(7405),h=function(e){var n=e.players,t=e.isDarkMode,h=(0,s.useState)(null),m=h[0],b=h[1],v=!1,y=!1,E=!1;return f().createElement(r.Z,null,Object.keys(n).map((function(e){return f().createElement(o.Z,{subheader:f().createElement(a.Z,{sx:{cursor:"pointer"},onClick:function(){b(e)}},e.toUpperCase()+" - AVAILABLE")},f().createElement(c.Z,{in:m===e},n[e].map((function(e){if("police"==e.job&&(v=!0),"ambulance"==e.job&&(y=!0),"tow"==e.job&&(E=!0),"police"!=e.job&&"ambulance"!=e.job&&"tow"!=e.job)return f().createElement(i.ZP,{secondaryAction:f().createElement(l.Z,{onClick:function(){return n=e.phoneNumber,void(0,d.Z)("npwd:qb-services:callPlayer",{number:n}).then((function(e){console.log(e.data)}));var n}},f().createElement(p.Z,null))},f().createElement(u.Z,{primaryTypographyProps:{color:t?"#fff":"#000",fontWeight:"bold"},primary:e.name,secondary:e.phoneNumber}))}))))})),!v&&f().createElement(o.Z,{subheader:f().createElement(a.Z,{sx:{cursor:"pointer"}},"POLICE - UNAVAILABLE")}),!y&&f().createElement(o.Z,{subheader:f().createElement(a.Z,{sx:{cursor:"pointer"}},"AMBULANCE - UNAVAILABLE")}),!E&&f().createElement(o.Z,{subheader:f().createElement(a.Z,{sx:{cursor:"pointer"}},"TOW - UNAVAILABLE")}))}},8440:(e,n,t)=>{t.d(n,{h:()=>o});var r=t(3839),o=t.n(r)()("div")({width:"100%",justifyContent:"flex-start",display:"flex",alignItems:"center",gap:20,marginBottom:20})},7405:(e,n,t)=>{t.d(n,{Z:()=>o});var r=t(5181);const o=function(e,n,t){return o=this,a=void 0,i=function(){var o;return function(e,n){var t,r,o,a,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;c;)try{if(t=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return c.label++,{value:a[1],done:!1};case 5:c.label++,r=a[1],a=[0];continue;case 7:a=c.ops.pop(),c.trys.pop();continue;default:if(!((o=(o=c.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){c=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){c.label=a[1];break}if(6===a[0]&&c.label<o[1]){c.label=o[1],o=a;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(a);break}o[2]&&c.ops.pop(),c.trys.pop();continue}a=n.call(e,c)}catch(e){a=[6,e],r=0}finally{t=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}}(this,(function(a){switch(a.label){case 0:return o={method:"post",headers:{"Content-Type":"application/json; charset=UTF-8"},body:JSON.stringify(n)},(0,r.Id)()&&t?[2,t]:[4,fetch("https://".concat("npwd_qb_services","/").concat(e),o)];case 1:return[4,a.sent().json()];case 2:return[2,a.sent()]}}))},new((c=void 0)||(c=Promise))((function(e,n){function t(e){try{l(i.next(e))}catch(e){n(e)}}function r(e){try{l(i.throw(e))}catch(e){n(e)}}function l(n){var o;n.done?e(n.value):(o=n.value,o instanceof c?o:new c((function(e){e(o)}))).then(t,r)}l((i=i.apply(o,a||[])).next())}));var o,a,c,i}},5181:(e,n,t)=>{t.d(n,{Id:()=>r});var r=function(){return!1}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,